AWSTemplateFormatVersion: "2010-09-09"
Description: Build a multiarch container image with SOCI Indexes on AWS CodeBuild

Parameters:
  RepositoryName:
    Description: Name of the Codecommit and ECR Repositories
    Type: String
    Default: socidemoapp
  SociVersion:
    Description: Version of the SOCI cli to use
    Type: String
    Default: 0.5.0

Resources:
  ######################
  # Core AWS Resources #
  ######################
  CodeRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref RepositoryName

  DemoAppEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName

  SourceBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      VersioningConfiguration:
        Status: Enabled

  ####################################################
  # Cloudwatch Event to Trigger CodePipeline on Push #
  ####################################################
  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'

  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Sub 'arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}'
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        - Arn: !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: codepipeline-Pipeline

  ############################
  # Pipeline IAM Permissions #
  ############################
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: "2012-10-17"

  PipelineRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PipelineRoleDefaultPolicy
      Roles:
        - Ref: PipelineRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt SourceBucket.Arn
              - !Sub "${SourceBucket.Arn}/*"
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource:
              - !GetAtt ImageBuildx86.Arn
              - !GetAtt ImageBuildArm64.Arn
              - !GetAtt DockerManifestList.Arn
          - Action:
              - codecommit:GetRepository
              - codecommit:GetBranch
              - codecommit:GetCommit
            Effect: Allow
            Resource:
              - !GetAtt CodeRepo.Arn

  ################################
  # Build the Image in CodeBuild #
  ################################
  ImageBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"

  ImageBuildRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ImageBuildRoleDefaultPolicy
      Roles:
        - Ref: ImageBuildRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ImageBuildx86}:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ImageBuildArm64}:*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutObject*
            Effect: Allow
            Resource:
              - !GetAtt SourceBucket.Arn
              - !Sub "${SourceBucket.Arn}/*"
          - Action:
              - codecommit:GitPull
            Effect: Allow
            Resource:
              - !GetAtt CodeRepo.Arn
          - Action:
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource:
              - "*"
          - Action:
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:CompleteLayerUpload
              - ecr:InitiateLayerUpload
              - ecr:PutImage
              - ecr:UploadLayerPart
            Effect: Allow
            Resource:
              - !GetAtt DemoAppEcr.Arn

  # x86 CodeBuild image has Buildx installed
  ImageBuildx86:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-ImageBuild-x86"
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: CONTAINERD_ADDRESS
            Type: PLAINTEXT
            Value: "/var/run/docker/containerd/containerd.sock"
      ServiceRole: !Ref ImageBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Download the SOCI Binaries
                - wget --quiet https://github.com/awslabs/soci-snapshotter/releases/download/v${SociVersion}/soci-snapshotter-${SociVersion}-linux-amd64.tar.gz
                - tar xvzf soci-snapshotter-${SociVersion}-linux-amd64.tar.gz ./soci
                - mv soci /usr/local/bin/soci
                - echo Logging in to Amazon ECR...
                - export PASSWORD=$(aws ecr get-login-password --region ${AWS::Region})
            build:
              commands:
                - cd api/
                - echo Building the container image
                - docker buildx create --driver=docker-container --use
                - docker buildx build --quiet --tag $IMAGE_URI:$IMAGE_TAG --file Dockerfile.v2 --output type=docker,dest=./image.tar .
                - echo Import the container image to containerd
                - ctr image import ./image.tar
                - echo Generating SOCI index
                - soci create $IMAGE_URI:$IMAGE_TAG
                - echo Pushing the container image
                - ctr image push --user AWS:$PASSWORD $IMAGE_URI:$IMAGE_TAG
                - echo Push the SOCI index to ECR
                - soci push --user AWS:$PASSWORD $IMAGE_URI:$IMAGE_TAG

  # ARM CodeBuild image does not Buildx installed
  ImageBuildArm64:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-ImageBuild-arm64"
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0
        PrivilegedMode: true
        Type: ARM_CONTAINER
        EnvironmentVariables:
          - Name: CONTAINERD_ADDRESS
            Type: PLAINTEXT
            Value: "/var/run/docker/containerd/containerd.sock"
      ServiceRole: !Ref ImageBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Download the SOCI Binaries
                - wget --quiet https://github.com/awslabs/soci-snapshotter/releases/download/v${SociVersion}/soci-snapshotter-${SociVersion}-linux-arm64.tar.gz
                - tar xvzf soci-snapshotter-${SociVersion}-linux-arm64.tar.gz ./soci
                - mv soci /usr/local/bin/soci
                - echo Logging in to Amazon ECR...
                - export PASSWORD=$(aws ecr get-login-password --region ${AWS::Region})
            build:
              commands:
                - cd api/
                - echo Building the container image
                - docker buildx create --driver=docker-container --use
                - docker buildx build --quiet --tag $IMAGE_URI:$IMAGE_TAG --file Dockerfile.v2 --output type=docker,dest=./image.tar .
                - echo Import the container image to containerd
                - ctr image import ./image.tar
                - echo Generating SOCI index
                - soci create $IMAGE_URI:$IMAGE_TAG
                - echo Pushing the container image
                - ctr image push --user AWS:$PASSWORD $IMAGE_URI:$IMAGE_TAG
                - echo Push the SOCI index to ECR
                - soci push --user AWS:$PASSWORD $IMAGE_URI:$IMAGE_TAG

  #################################
  # Create a Docker Manifest List #
  #################################
  DockerManifestListRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"

  DockerManifestListRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DockerManifestListRolePolicy
      Roles:
        - Ref: DockerManifestListRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${DockerManifestList}:*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutObject*
            Effect: Allow
            Resource:
              - !GetAtt SourceBucket.Arn
              - !Sub "${SourceBucket.Arn}/*"
          - Action:
              - codecommit:GitPull
            Effect: Allow
            Resource:
              - !GetAtt CodeRepo.Arn
          - Action:
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource:
              - "*"
          - Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:PutImage
            Effect: Allow
            Resource:
              - !GetAtt DemoAppEcr.Arn

  DockerManifestList:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-DockerManifestList"
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
      Environment:
        ComputeType: BUILD_LAMBDA_1GB
        Image: aws/codebuild/amazonlinux-aarch64-lambda-standard:go1.21
        Type: ARM_LAMBDA_CONTAINER
        EnvironmentVariables:
          - Name: DOCKER_CONFIG
            Type: PLAINTEXT
            Value: "/tmp/.docker/"
      ServiceRole: !Ref DockerManifestListRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - mkdir /tmp/.docker
                - >
                  echo '{"credsStore": "ecr-login"}' > /tmp/.docker/config.json
                - echo Install Credential Helper
                - GOSUMDB=off go install github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login@latest
                - echo Install manifest tool
                - GOSUMDB=off go install github.com/estesp/manifest-tool/v2/cmd/manifest-tool@latest
            build:
              commands:
                - manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template $IMAGE_URI:$IMAGE_TAG-ARCH --target $IMAGE_URI:$IMAGE_TAG

  #######################
  # Define CodePipeline #
  #######################
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
         - PipelineRoleDefaultPolicy
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref "SourceBucket"
      RoleArn:
        Fn::GetAtt:
          - PipelineRole
          - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              Configuration:
                RepositoryName: !GetAtt CodeRepo.Name
                BranchName: "main"
                PollForSourceChanges: false
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: BuildContainerImagex86
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref ImageBuildx86
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "IMAGE_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DemoAppEcr}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "IMAGE_TAG",
                      "value": "#{codepipeline.PipelineExecutionId}-amd64",
                      "type": "PLAINTEXT"
                    }
                  ]
              InputArtifacts:
                - Name: SourceArtifact
            - Name: BuildContainerImageArm64
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref ImageBuildArm64
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "IMAGE_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DemoAppEcr}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "IMAGE_TAG",
                      "value": "#{codepipeline.PipelineExecutionId}-arm64",
                      "type": "PLAINTEXT"
                    }
                  ]
              InputArtifacts:
                - Name: SourceArtifact
        - Name: CreateManifestList
          Actions:
            - Name: CreateManifestList
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref DockerManifestList
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "IMAGE_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DemoAppEcr}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "IMAGE_TAG",
                      "value": "#{codepipeline.PipelineExecutionId}",
                      "type": "PLAINTEXT"
                    }
                  ]
              InputArtifacts:
                - Name: SourceArtifact


Outputs:
  DemoAppEcr:
    Description: ECR Repository to store the Demo App Image
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DemoAppEcr}"
  DemoAppEcrName:
    Description: ECR Repository to store the Demo App Image
    Value: !Ref DemoAppEcr